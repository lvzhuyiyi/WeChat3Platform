<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>WinXinTPlatform</display-name>
    <welcome-file-list>
    <welcome-file>/webpage/login/login.jsp</welcome-file>
  </welcome-file-list>
  <context-param>
    <param-name>webAppRootKey</param-name>
  <param-value>WeChat3Platform</param-value>
  </context-param>
  <context-param>
    <param-name>log4jConfigLocation</param-name>
    <param-value>classpath:log4j.properties</param-value>
  </context-param>
   <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring-*.xml</param-value>
  </context-param>
  
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>
  <listener>
    <description>spring监听器</description>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <!-- 它是一个在web应用关闭的时候,清除JavaBeans Introspector的监听器.web.xml中注册这个listener.可以保证在web 
     应用关闭的时候释放与掉这个web 应用相关的class loader 和由它管理的类
   -->
   <listener>
    <description>Introspector缓存清除监听器</description>
    <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
  </listener>
  <!-- 在Spring2.0中除了以前的Singleton和Prototype外又加入了三个新的web作用域，分别为request、session和global session，
      如果你想让你的容器里的某个bean拥有其中某种新的web作用域 -->
  <listener>
    <description>request监听器</description>
    <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
  </listener>
  <listener>
    <listener-class>web.system.listener.OnlineListener</listener-class>
  </listener>
  
  
  
  
  <!--  OpenSessionInView在request把session绑定到当前thread
  期间一直保持hibernate session在open状态，使session在request
  的整个期间都可以使用，如在View层里PO也可以lazy loading数据，
  如 ${ company.employees }。当View 层逻辑完成后，才会通过Filter的doFilter
  方法或Interceptor的postHandle方法自动关闭session。 -->
  
  <filter>
    <filter-name>openSessionInViewFilter</filter-name>
    <filter-class>org.springframework.orm.hibernate4.support.OpenSessionInViewFilter</filter-class>
    <init-param>
      <param-name>singleSession</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>openSessionInViewFilter</filter-name>
    <url-pattern>*.do</url-pattern>
  </filter-mapping>
  
  <filter>
    <filter-name>forbiddeDirectVisitJspFilter</filter-name>
    <filter-class>web.core.filters.ForbiddeDirectVisitJspFilter</filter-class>   
  </filter>
  <filter-mapping>
    <filter-name>forbiddeDirectVisitJspFilter</filter-name>
    <url-pattern>*.jsp</url-pattern>
  </filter-mapping>


<filter>
    <filter-name>sessionExpiredFiler</filter-name>
    <filter-class>web.core.filters.SessionExpiredFiler</filter-class>   
  </filter>
  <filter-mapping>
    <filter-name>sessionExpiredFiler</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <!-- 
  很简单很实用的一个过滤器，当前台JSP页面和JAVA代码中使用了不同的字符集进行编码的时候就会
  出现表单提交的数据或者上传/下载中文名称文件出现乱码的问题，那这个类就可以出场了
   -->
  <filter>
    <description>字符集过滤器</description>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <description>字符集编码</description>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  
  <filter>
		<filter-name>FileUploadFilter</filter-name>
		<filter-class>com.ckfinder.connector.FileUploadFilter</filter-class>
                <init-param>
                    <param-name>sessionCookieName</param-name>
                    <param-value>JSESSIONID</param-value>
                </init-param>
                <init-param>
                    <param-name>sessionParameterName</param-name>
                    <param-value>jsessionid</param-value>
                </init-param>
	</filter>
	<filter-mapping>
		<filter-name>FileUploadFilter</filter-name>
		<url-pattern>/plug-in//ckfinder/core/connector/java/connector.java</url-pattern>
	</filter-mapping>
	
  <servlet>
    <description>spring mvc servlet</description>
    <servlet-name>springMvc</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <description>spring mvc 配置文件</description>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:spring-mvc.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>springMvc</servlet-name>
    <url-pattern>*.do</url-pattern>
  </servlet-mapping>
   
  <servlet> 
    <servlet-name>ConnectorServlet</servlet-name> 
    <servlet-class>com.ckfinder.connector.ConnectorServlet</servlet-class>
    <init-param> 
        <param-name>XMLConfig</param-name> 
        <param-value>/WEB-INF/ckfinder.xml</param-value> 
    </init-param> 
    <init-param> 
        <param-name>debug</param-name> 
        <param-value>false</param-value> 
    </init-param> 
    <load-on-startup>1</load-on-startup> 
</servlet> 
<servlet-mapping>
    <servlet-name>ConnectorServlet</servlet-name> 
    <url-pattern> /plug-in/ckfinder/core/connector/java/connector.java </url-pattern> 
</servlet-mapping>
<servlet>
    <servlet-name>RandCodeImage</servlet-name>
    <servlet-class>web.system.servlet.RandCodeImageServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>RandCodeImage</servlet-name>
    <url-pattern>/randCodeImage</url-pattern>
  </servlet-mapping>
  <error-page>
    <error-code>404</error-code>
    <location>/webpage/common/404.jsp</location>
  </error-page>
  <session-config>
    <session-timeout>30</session-timeout>
  </session-config>
  
  <!--  <servlet>  
    <servlet-name>coreservlet</servlet-name>
    <servlet-class>weixin.basic.servlet.CoreServlet</servlet-class>   
  </servlet>
  <servlet-mapping>
    <servlet-name>coreservlet</servlet-name>
    <url-pattern>/coreservlet</url-pattern>
  </servlet-mapping>
   <servlet>  
    <servlet-name>authservlet</servlet-name>
    <servlet-class>weixin.basic.servlet.OAuthServlet</servlet-class>   
  </servlet>
  <servlet-mapping>
    <servlet-name>authservlet</servlet-name>
    <url-pattern>/authservlet</url-pattern>
  </servlet-mapping>
  -->
</web-app>